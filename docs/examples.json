{
  "Sequence class": "class Seq {\n\tinit(p) {\n\t\tthis.prev = p;\n\t\tthis.curr = 1;\n\t}\n}\n\nclass Fib < Seq {\n\tinit() {\n\t\tsuper.init(0);\n\t}\n\n\tnext() {\n\t\tvar res = this.prev;\n\t\tthis.prev = this.curr;\n\t\tthis.curr = this.curr + res;\n\t\treturn res;\n\t}\n}\n\nclass Fact < Seq {\n\tinit() {\n\t\tsuper.init(1);\n\t}\n\n\tnext() {\n\t\tvar res = this.prev;\n\t\tthis.prev = this.prev * this.curr;\n\t\tthis.curr = this.curr + 1;\n\t\treturn res;\n\t}\n}\n\nprint(\"Fibonacci\");\nvar fib = Fib();\nfor (var i = 0; i < 10; i = i + 1) {\n\tprint fib.next();\n}\n\nprint(\"Factorial\");\nvar fact = Fact();\nfor (var i = 0; i < 10; i = i + 1) {\n\tprint fact.next();\n}",

  "Lists": "var l = [1, 2, 3, 4, 5];\nprint \"List\";\nprint l;\n\nprint \"Append\";\nappend(l, 6);\nprint l;\n\nprint \"Insert\";\ninsert(l, 0, -1);\nprint l;\n\nprint \"Pop\";\nprint pop(l);\n\nprint \"Delete\";\ndelete(l, 0);\nprint l;\n\nfun reverse(l) {\n\tvar n = len(l);\n\n\tfor (var i = 0; i < n / 2; i = i + 1) {\n\t\tvar tmp = l[i];\n\t\tl[i] = l[n - 1 - i];\n\t\tl[n - 1 - i] = tmp;\n\t}\n}\n\nprint \"Reversed\";\nreverse(l);\nprint l;\n\nprint \"Empty list\";\nvar x = list(0, 5); \nprint x;\n\nprint \"Multi type list\";\n\nx[0] = 1;\nx[1] = \"hello\";\nx[2] = reverse;\nx[3] = \"world\";\nx[4] = -1;\n\nprint x;\nx[2](x);\nprint x;\n\nvar fib = [0, 1]; \nfor (var i=0; i<15; i=i+1) append(fib, fib[-1] + fib[-2]);\n\nprint \"Fibonacci numbers\";\nprint fib;",

  "Functions": "fun very_slow_exp(a, n) {\n\tvar r = 1;\n\tfor (var i = 0; i < n; i = i + 1) r = r * a;\n\treturn r;\n}\n\nprint very_slow_exp(3, 3);\n\nprint very_slow_exp(3,4) == very_slow_exp(9,2);\nprint very_slow_exp(1,3) == very_slow_exp(3,1);\n\nfun plus(a, b) {\n\treturn a + b;\n}\n\nprint plus(\n\tplus(5, 5), \n\tplus(5, 5)\n);\n\nprint plus(\n\tplus(\"Hello\", \", \"), \n\tplus(\"World\", \"!\")\n);",

  "Closures": "fun makeCounter() {\n\tvar i = 0;\n\tfun count() {\n\t\ti = i + 1;\n\t\tprint i;\n\t}\n\n\treturn count;\n}\n\nprint makeCounter;\n\nvar counter = 0;\ncounter = makeCounter();\nprint counter;\n\ncounter();\ncounter();\ncounter();\n\n\nvar m = 0;\n\nfun inc() {\n\tm = m + 1;\n}\n\ninc();\ninc();\ninc();\ninc();\ninc();\n\nprint inc;\nprint m;",

  "Leibniz Ï€": "fun item(n) {\n\tvar denominator = 2*n+1;\n\tvar sign = 1;\n\tfor (var i = 0; i < n; i = i+1) {\n\t\tsign = sign * -1;\n\t}\n\treturn sign / denominator;\n}\n\nfun leibniz(k) {\n\tvar quarter = 0;\n\tfor (var i = 0; i < k; i = i+1) {\n\t\tquarter = quarter + item(i);\n\t}\n\n\treturn 4*quarter;\n}\n\nprint leibniz(1000);",

  "Scopes": "var a = \"global a\";\nvar b = \"global b\";\nvar c = \"global c\";\n{\n\tvar a = \"outer a\";\n\tvar b = \"outer b\";\n\t{\n\t\tvar a = \"inner a\";\n\t\tprint a;\n\t\tprint b;\n\t\tprint c;\n\t}\n\tprint a;\n\tprint b;\n\tprint c;\n}\nprint a;\nprint b;\nprint c;",

  "Recursion": "fun factorial(n) {\n\tif (n <= 1) return 1;\n\treturn n * factorial(n - 1);\n}\n\nprint \"Factorial of 5:\";\nprint factorial(5);\n\nfun fib(n) {\n\tif (n <= 1) return n;\n\treturn fib(n - 1) + fib(n - 2);\n}\n\nprint \"Fibonacci sequence (0 to 9):\";\nfor (var i = 0; i < 10; i = i + 1) {\n\tprint fib(i);\n}"
}
